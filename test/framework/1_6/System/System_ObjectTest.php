<?php

require_once dirname(__FILE__) . '/../../../../framework/1_6/System/Object.php';

class System_Object_Test_SetGet extends System_Object {

    private $Test;

    public function getTest() {
        return '^' . $this->Test . '$';
    }

    public function setTest($value) {
        $this->Test = $value;
    }

    protected function Concat___Unknown($arg) {
        return join('', $arg);
    }

}

class System_Object_Test_MemberwiseClone extends System_Object_Test_SetGet {

    public function ShallowCopy() {
        return $this->MemberwiseClone();
    }

}

class System_Object_Test_Finalize extends System_Object_Test_MemberwiseClone {

    public function Finalize() {
        throw new ErrorException('finalize');
    }

}

class System_Object_Test_Point extends System_Object {

    protected $x;
    protected $y;

    public function __construct($X = 0, $Y = 0) {
        $this->x = $X;
        $this->y = $Y;
    }

    public function Equals___System_Boolean(System_Boolean $obj) {
        return $obj->Value;
    }

    public function Equals___System_Object(System_Object $obj) {
        //Check for null and compare run-time types.
        if ($obj == null || $this->GetType() != $obj->GetType())
            return false;
        $p = static_cast('System_Object_Test_Point', $obj);
        return ($this->x == $p->x) && ($this->y == $p->y);
    }

    public function GetHashCode() {
        return $this->x ^ $this->y;
    }

}

class System_Object_Test_Point3D extends System_Object_Test_Point {

    protected $z;

    public function __construct($X, $Y, $Z) {
        $this->x = $X;
        $this->y = $Y;
        $this->z = $Z;
    }

    public function Equals___System_Object(System_Object $obj) {
        return parent::Equals($obj) && $this->z == static_cast('System_Object_Test_Point3D', $obj)->z;
    }

    public function Equals___integer($obj) {
        return $this->z == $obj;
    }

    public function Equals___string($obj) {
        list($x, $y, $z) = explode(',', $obj);
        return $this->x == $x && $this->y == $y && $this->z == $z;
    }

    public function GetHashCode() {
        return parent::GetHashCode() ^ $this->z;
    }

}

/**
 * Test class for System_Object.
 * Generated by PHPUnit on 2012-02-26 at 22:17:18.
 */
class System_ObjectTest extends PHPUnit_Framework_TestCase {

    /**
     * @var System_Object
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @covers System_Object::__construct
     */
    protected function setUp() {
        $this->object = new System_Object;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        unset($this->object);
    }

    /**
     * @covers System_Object::__call
     * @covers System_Object::Equals___System_Object
     */
    public function testEquals() {
        $objA = new System_Object();
        $objB = new System_Boolean();
        $objC = $this->object;

        $this->assertEquals(false, $this->object->Equals(null));
        $this->assertEquals(false, $this->object->Equals(null, null));

        $this->assertEquals(false, $this->object->Equals($objA));
        $this->assertEquals(false, $this->object->Equals($objB));
        $this->assertEquals(true, $this->object->Equals($objC));

        $this->assertEquals(false, $this->object->Equals(true));
        $this->assertEquals(false, $this->object->Equals(5));
        $this->assertEquals(false, $this->object->Equals('foo'));
        $this->assertEquals(false, $this->object->Equals(null));

        $Obj1 = new System_Object();
        $Obj2 = new System_Object();
        $this->assertEquals(false, $Obj1->Equals($Obj2));
        $Obj2 = $Obj1;
        $this->assertEquals(true, $Obj1->Equals($Obj2));
    }

    /**
     * @covers System_Object::__call
     * @covers System_Object::Equals___System_Object
     */
    public function testEqualsPoint() {
        $a = new System_Object_Test_Point(1, 2);
        $b = new System_Object_Test_Point(3, 4);
        $this->assertEquals(true, $a->Equals($a));
        $this->assertEquals(false, $a->Equals($b));

        $this->assertEquals(3 ^ 4, $b->GetHashCode());

        $c3 = new System_Object_Test_Point3D(1, 2, 3);
        $d3 = new System_Object_Test_Point3D(1, 2, 3);
        $e3 = new System_Object_Test_Point3D(3, 4, 5);

        $this->assertEquals(false, $a->Equals($c3));
        $this->assertEquals(true, $c3->Equals($d3));
        $this->assertEquals(false, $c3->Equals($e3));

        $this->assertEquals(true, $e3->Equals(5));
        $this->assertEquals(true, $e3->Equals('3, 4, 5'));

        $this->assertEquals(false, $a->Equals(false));
        $this->assertEquals(true, $e3->Equals(true));
    }

    /**
     * @covers System_Object::__destruct
     * @covers System_Object::Finalize
     * @expectedException ErrorException
     */
    public function testFinalize() {
        $objA = new System_Object_Test_Finalize();
        unset($objA);
    }

    /**
     * @covers System_Object::GetHashCode
     */
    public function testGetHashCode() {
        $objA = $this->object;
        $objB = new System_Object();
        $this->assertEquals($objA->GetHashCode(), $this->object->GetHashCode());
        $this->assertNotEquals($objB->GetHashCode(), $this->object->GetHashCode());
    }

    /**
     * @covers System_Object::GetType
     */
    public function testGetType() {
        $this->assertEquals('System_Object', $this->object->GetType());
    }

    /**
     * @covers System_Object::MemberwiseClone
     * @covers System_Object::GetHashCode
     * @covers System_Object::__set
     * @covers System_Object::__get
     */
    public function testMemberwiseClone() {
        $objA = new System_Object_Test_MemberwiseClone();
        $objA->Test = '13';
        $objB = $objA->ShallowCopy();
        $this->assertEquals($objA, $objB);
        $this->assertEquals($objA->Test, $objB->Test);
        $this->assertNotEquals($objA->GetHashCode(), $objB->GetHashCode());
    }

    /**
     * @covers System_Object::ReferenceEquals
     * @covers System_Object::GetType
     */
    public function testReferenceEquals() {
        $objA = new System_Object();
        $objB = new System_Boolean();
        $this->assertEquals(true, System_Object::ReferenceEquals($this->object->GetType(), $objA->GetType()));
        $this->assertEquals(false, System_Object::ReferenceEquals($this->object->GetType(), $objB->GetType()));
        $objAnull = null;
        $objBnull = null;
        $this->assertEquals(true, System_Object::ReferenceEquals($objAnull, $objBnull));
    }

    /**
     * @covers System_Object::ToString
     * @covers System_Object::__toString
     */
    public function testToString() {
        $this->assertEquals('[System_Object]', $this->object->ToString());
        $this->assertEquals('[System_Object]', $this->object);
    }

    /**
     * @covers System_Object::__set
     * @covers System_Object::__get
     */
    public function test__set__get() {
        $objA = new System_Object_Test_SetGet();
        $objA->Test = '12';
        $this->assertEquals('^12$', $objA->Test);
    }

    /**
     * @covers System_Object::__get
     * @expectedException ErrorException
     */
    public function test__getException() {
        $objA = new System_Object_Test_SetGet();
        echo $objA->NotExists;
    }

    /**
     * @covers System_Object::__set
     * @expectedException ErrorException
     */
    public function test__setException() {
        $objA = new System_Object_Test_SetGet();
        $objA->NotExists = 14;
    }

    /**
     * @covers System_Object::__call
     * @expectedException ErrorException
     */
    public function test__callException() {
        $objA = new System_Object_Test_SetGet();
        $objA->NotExistsMethod();
    }

    /**
     * @covers System_Object::__call
     */
    public function test__callDefined() {
        $objA = new System_Object_Test_SetGet();
        $this->assertEquals('alama', $objA->Concat('ala', 'ma'));
        $this->assertEquals('noico', $objA->Concat('no', 'i', 'co'));
    }

}

?>